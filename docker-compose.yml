version: '3.8'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: task-service-api
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      - SERVER_PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=taskdb
      - DB_SSLMODE=disable
      - DB_MAX_CONNS=10
      - DB_TIMEOUT=5s
      - JWT_SECRET=secret
      - JWT_EXPIRE_DELTA=24h
      - LOG_LEVEL=info
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  postgres:
    image: postgres:15-alpine
    container_name: task-service-db
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=taskdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  migrate:
    image: migrate/migrate
    container_name: task-service-migrate
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    command: [ "-path", "/migrations", "-database", "postgres://postgres:postgres@postgres:5432/taskdb?sslmode=disable", "up" ]
    restart: "no"

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: task-service-prometheus
    depends_on:
      - api
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: always

  grafana:
    image: grafana/grafana:10.2.2
    container_name: task-service-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    restart: always

volumes:
  postgres_data:
  grafana_data: